# Local.rules - Site-Local definitions.

# ${XEMACS_PACKAGES_BASE} is defined in XEmacs.rules, and is always
# the full / rooted path to the directory where this "Local.rules"
# makefile is supposed to be.  Don't override it here.

##################### Begin settings that commonly need to be changed

# When `t', a symlink tree will be built for running a live CVS
# checkout.  Requires GNU `cp', and that you configure your XEmacs
# to use ${STAGING} in the package-path.  Create the tree with `make
# install'.
#
symlink = 

# Path to XEmacs to use for byte compilation.
#
# (Double-quote path under native MS Windows if there are embedded spaces.)
XEMACS = xemacs

# Should we build the mule package?  Set to 't' if you do not have/want Mule.
#
BUILD_WITHOUT_MULE =

# Following test, which would be performed by every makefile
# including XEmacs.rules, slows down the make process terribly
# according to
#
# From: Gunnar Evermann <ge204@eng.cam.ac.uk>
# Subject: building xemacs-pacakges on unix
# To: XEmacs Developers <xemacs-beta@xemacs.org>
# Date: 14 Oct 2000 12:28:44 +0100
#
# XEMACS_NATIVE_NT = \
# $(shell $(XEMACS) $(VANILLA) -batch \
# -eval "(princ (eq system-type 'windows-nt))")
#
# Therefore this has become a make variable instead:
#
# Set XEMACS_NATIVE_NT to 't' if you are building using a native
# Microsoft Windows version of XEmacs (not a Cygwin-built version).
# NOTE: You still need the Cygwin environment to build the packages!
# This only concerns how XEmacs itself was built.
XEMACS_NATIVE_NT =

# XEmacs native MS Windows needs this quoting of command-line
# arguments due to basic differences in the handling of command-line
# arguments in Unix and MS Windows.
#### not any more, as of Cygwin 1.1.8-2 (Feb 2001) -- ben
# set this to 't' if you get errors under MS Windows without it.
XEMACS_NATIVE_NT_NEEDS_EXTRA_QUOTING =

#
# Where to stage or install the non-Mule packages, or where the
# symlink tree will go.
#
XEMACS_STAGING = ${XEMACS_PACKAGES_BASE}/../xemacs-packages

#
# Where to stage or install the Mule packages, or where the
# symlink tree will go.
#
MULE_STAGING = ${XEMACS_PACKAGES_BASE}/../mule-packages

# XEmacs packages or groups of packages to install. 'make bindist'
# doesn't look at this, it's used by 'make install'.
#
# The format for this is: xemacs-packages/pkg1 xemacs-packages/pkg2...
# e.g. xemacs-packages/xemacs-base xemacs-packages/bbdb
XEMACS_PACKAGES = xemacs-packages

# Mule packages or groups of packages to install.  'make bindist'
# doesn't look at this, it's used by 'make install'.
#
# The format for this is: mule-packages/pkg1 mule-packages/pkg2...
# e.g. mule-packages/mule-base mule-packages/skk
MULE_PACKAGES = mule-packages

##################### End settings that commonly need to be changed

PACKAGE_INDEX = package-index

# See: Makefile and XEmacs.rules to see how $(XEMACS_STAGING),
# $(MULE_STAGING), and $(STAGING) are used.
#

# We need to set STAGING so that `make' run from a lower-level directory
# works right.

# the first endif is really not necessary, because STAGING is set from
# the command line, and variable settings should not override command-line
# ones.
ifeq ('$(STAGING)','')
ifeq ('$(CATEGORY)','mule')
STAGING := $(MULE_STAGING)
else
STAGING := $(XEMACS_STAGING)
endif
endif

# 'make bindist' needs STAGING to be set to XEMACS_STAGING regardless of
# whether a Mule package or not so we don't end up with 2 package-index 
# files.
ifeq ('$(MAKECMDGOALS)','bindist')
STAGING := $(XEMACS_STAGING)
endif

# Path to BSD install.
# INSTALL = ginstall -c
#
INSTALL = install -c

# Define to build tarfiles for installation/distribution
#
ifneq ('$(symlink)','t')
BUILD_TARS = t
else
BUILD_TARS =
endif

# Path to GNU tar.
#
TAR = tar
# if you run FreeBSD install the gtar package in archivers/gtar
# and use this option 
# TAR = gtar

# Path to bzip2
# If this is set, then tar.bz2 packages will be created.
# BZIP2 = bzip2
#
BZIP2 =

# Stuff tar should never archive
#
EXCLUDES =					\
	--exclude 'CVS'				\
	--exclude 'RCS'				\
	--exclude 'SCCS'			\
	--exclude '*~'				\
	--exclude '*.orig'			\
	--exclude '*.rej'			\
	--exclude '.\#*'

VANILLA = -vanilla

# path to makeinfo
#
MAKEINFO = makeinfo

# path to texi2info
#
TEXI2HTML = texi2html
TEXI2HTML_FLAGS = -split chapter

ifneq ('$(symlink)','t')
 # path to GNU cp, use the latter if no GNU cp is available.
 # use the latter option if you are running FreeBSD.
 #
 RCOPY = cp -af
 # RCOPY = cp -pR
else
 # This next one is for running in-place from a CVS checkout.
 # NOTE: cp on FreeBSD does not have a --symbolic-link option
 # so this may not work.
 #
 RCOPY = cp --force --recursive --symbolic-link
endif
#
# Local Variables:
# mode: makefile
# End:
#
