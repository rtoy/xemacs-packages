# Local.rules - Site-Local definitions.

# ${XEMACS_PACKAGES_BASE} is defined in XEmacs.rules, and is always
# the full / rooted path to the directory where this "Local.rules"
# makefile is supposed to be.  Don't override it here.

##################### Begin settings that commonly need to be changed

# Path to XEmacs to use for byte compilation.
#
# (Double-quote path under native MS Windows if there are embedded spaces.)
XEMACS = xemacs

# Should we build the Mule packages?  Set to 't' if you do not have/want Mule.
#
BUILD_WITHOUT_MULE =

# Following test, which would be performed by every makefile
# including XEmacs.rules, slows down the make process terribly
# according to
#
# From: Gunnar Evermann <ge204@eng.cam.ac.uk>
# Subject: building xemacs-pacakges on unix
# To: XEmacs Developers <xemacs-beta@xemacs.org>
# Date: 14 Oct 2000 12:28:44 +0100
#
# XEMACS_NATIVE_NT = \
# $(shell $(XEMACS) $(BATCH) \
# -eval "(princ (eq system-type 'windows-nt))")
#
# Therefore this has become a make variable instead:
#
# Set XEMACS_NATIVE_NT to 't' if you are building using a native
# Microsoft Windows version of XEmacs (not a Cygwin-built version).
# NOTE: You still need the Cygwin environment to build the packages!
# This only concerns how XEmacs itself was built.
XEMACS_NATIVE_NT =

#
# The directory tree under which the installed packages go.  Under this
# directory will be directories xemacs-packages/ (non-Mule packages),
# mule-packages/ (Mule packages, if you built XEmacs with Mule,
# i.e. international, support), and maybe site-packages/ (packages you
# created yourself).  If you are installing XEmacs normally, this should be
# <xemacs-root>/lib/xemacs, where <xemacs-root> is the topmost-level
# directory under which everything is installed -- normally /usr/local, and
# set using the `--prefix' parameter to `configure'.  See the INSTALL file.

XEMACS_INSTALLED_PACKAGES_ROOT = /usr/local/lib/xemacs

# If you are developing XEmacs, you probably don't want to install the
# packages under /usr/local, which is where the stable, released version of
# XEmacs goes.  Instead, we suggest a layout as described in the base
# README file of recent versions of XEmacs.  In a nutshell, we suggest you
# put your source under /src/xemacs, and under this put the package sources
# in package-src/, and the installed packages in xemacs-packages/ and
# mule-packages/.  If you do everything this way, you might want to set things as follows:
#
#XEMACS_INSTALLED_PACKAGES_ROOT = ${XEMACS_PACKAGES_BASE}/..
#
# which puts the xemacs-packages/ and mule-packages/ directories as sisters
# of the package-src/ directory, and you have to tell configure the
# location of the installed packages using `--package-path', something like
#
#	configure --package-path=/src/xemacs/xemacs-packages;/src/xemacs/mule-packages ...
#

# When `t', a symlink tree will be built for running a live CVS
# checkout.  Requires GNU `cp', and that you configure your XEmacs
# to use ${STAGING} in the package-path.  Create the tree with `make
# install'.
#
symlink = 

##################### End settings that commonly need to be changed

#
# Where to install the non-Mule packages, or where the symlink tree will
# go.  You probably don't want to change this.
#
NONMULE_INSTALLED_PACKAGES_ROOT = ${XEMACS_INSTALLED_PACKAGES_ROOT}/xemacs-packages

#
# Where to install the Mule packages, odr where the symlink tree will go.
# You probably don't want to change this.
#
MULE_INSTALLED_PACKAGES_ROOT = ${XEMACS_INSTALLED_PACKAGES_ROOT}/mule-packages

# Non-Mule packages or groups of packages to build/install.  'make bindist'
# doesn't look at this, it's used by 'make install'.  You probably don't
# want to change this.
#
# The format for this is: xemacs-packages/pkg1 xemacs-packages/pkg2...
# e.g. xemacs-packages/xemacs-base xemacs-packages/bbdb
NONMULE_PACKAGES = xemacs-packages

# Mule packages or groups of packages to build/install.  'make bindist'
# doesn't look at this, it's used by 'make install'.  You probably don't
# want to change this.  If you don't want any Mule packages, don't change
# this, instead set BUILD_WITHOUT_MULE above.
#
# The format for this is: mule-packages/pkg1 mule-packages/pkg2...
# e.g. mule-packages/mule-base mule-packages/skk
MULE_PACKAGES = mule-packages

PACKAGE_INDEX = package-index

# Path to BSD install.
# INSTALL = ginstall -c
#
INSTALL = install -c

# Define to build tarfiles for installation/distribution
#
ifneq ('$(symlink)','t')
BUILD_TARS = t
else
BUILD_TARS =
endif

# Path to GNU tar.
#
TAR = tar
# if you run FreeBSD install the gtar package in archivers/gtar
# and use this option 
# TAR = gtar

# Path to bzip2
# If this is set, then tar.bz2 packages will be created.
# BZIP2 = bzip2
#
BZIP2 =

# Stuff tar should never archive
#
EXCLUDES =					\
	--exclude 'CVS'				\
	--exclude 'RCS'				\
	--exclude 'SCCS'			\
	--exclude '*~'				\
	--exclude '*.orig'			\
	--exclude '*.rej'			\
	--exclude '.\#*'

VANILLA = -vanilla

# Flags to run XEmacs from Makefiles.
#
BATCH = $(VANILLA) -batch -eval '(setq stack-trace-on-error t load-ignore-out-of-date-elc-files t load-show-full-path-in-messages t)'

# path to makeinfo
#
MAKEINFO = makeinfo

# path to texi2html
#
TEXI2HTML = texi2html
# texi2html 1.56k on Cygwin has "-split_chapter", whereas newer versions
# (eg. 1.64) has "-split chapter", this should work either way.  1.56k doesn't
# have "-help" and 1.64 doesn't have "-usage", but doing "-help" with 1.56k
# outputs the usage anyway :P
ifneq ('$(shell sh -c "texi2html -help 2>&1 | grep -l split_chapter")','')
TEXI2HTML_FLAGS = -split_chapter
else
TEXI2HTML_FLAGS = -split chapter
endif


# path to texi2dvi, dvips, texi2pdf; If not defined, no conversion will happen
#
ifeq ($(XEMACS_NATIVE_NT),t)
# Cygwin versions currently broken.
TEXI2DVI =
DVIPS =
TEXI2PDF =
else
TEXI2DVI = texi2dvi
DVIPS = dvips
TEXI2PDF = texi2pdf
endif

ifneq ('$(symlink)','t')
 # path to GNU cp, use the latter if no GNU cp is available.
 # use the latter option if you are running FreeBSD.
 #
 RCOPY = cp -af
 # RCOPY = cp -pR
else
 # This next one is for running in-place from a CVS checkout.
 # NOTE: cp on FreeBSD does not have a --symbolic-link option
 # so this will not work.  You could try something like
 # `pax -rw -l -p p', but this will create hard links rather than
 # symbolic links.
 #
 RCOPY = cp --force --recursive --symbolic-link
endif
#
# Local Variables:
# mode: makefile
# End:
#
